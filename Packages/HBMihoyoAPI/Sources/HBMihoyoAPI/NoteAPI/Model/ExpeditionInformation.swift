//
//  File.swift
//
//
//  Created by 戴藏龙 on 2023/5/2.
//

import Foundation

/// Expedition information generated by `Note` API
public struct ExpeditionInformation: Decodable {
    // MARK: Lifecycle

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.expeditions = try container.decode([ExpeditionInformation.Expedition].self, forKey: .expeditions)
        self.totalExpeditionNumber = try container.decode(Int.self, forKey: .totalExpeditionNumber)
        self.acceptedExpeditionNumber = try container.decode(Int.self, forKey: .acceptedExpeditionNumber)
    }

    // MARK: Public

    /// Each expedition information generated by `Note` API
    public struct Expedition: Decodable {
        // MARK: Lifecycle

        public init(from decoder: Decoder) throws {
            let container: KeyedDecodingContainer<ExpeditionInformation.Expedition.CodingKeys> = try decoder
                .container(keyedBy: ExpeditionInformation.Expedition.CodingKeys.self)
            self.status = try container.decode(
                ExpeditionInformation.Expedition.Status.self,
                forKey: ExpeditionInformation.Expedition.CodingKeys.status
            )
            self.remainingTime = try container.decode(
                TimeInterval.self,
                forKey: ExpeditionInformation.Expedition.CodingKeys.remainingTime
            )
            self.avatarIconURLs = try container.decode(
                [URL].self,
                forKey: ExpeditionInformation.Expedition.CodingKeys.avatarIconURLs
            )
            self.name = try container.decode(String.self, forKey: ExpeditionInformation.Expedition.CodingKeys.name)
        }

        // MARK: Public

        public enum Status: String, Decodable {
            case onGoing = "Ongoing"
            case finished = "Finished"
        }

        /// Status of expedition
        public let status: Status
        /// Remaining time of expedition
        public let remainingTime: TimeInterval
        /// The avatars' icons of current expedition
        public let avatarIconURLs: [URL]
        /// The name of expedition
        public let name: String

        // MARK: Internal

        enum CodingKeys: String, CodingKey {
            case status
            case remainingTime = "remaining_time"
            case avatarIconURLs = "avatars"
            case name
        }

        // MARK: Private

        /// The time this struct generated
        private let fetchTime: Date = .init()
    }

    /// Details of all accepted expeditions
    public let expeditions: [Expedition]
    /// Max expeditions number
    public let totalExpeditionNumber: Int
    /// Current accepted expedition number
    public let acceptedExpeditionNumber: Int

    // MARK: Internal

    enum CodingKeys: String, CodingKey {
        case expeditions
        case totalExpeditionNumber = "total_expedition_num"
        case acceptedExpeditionNumber = "accepted_epedition_num"
    }
}
